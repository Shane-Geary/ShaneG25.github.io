---
layout: post
title:      "Object Oriented Ruby "
date:       2020-05-03 19:00:07 +0000
permalink:  object_oriented_ruby
---


OOR or 'Object oriented ruby' can be described as modeling the objects you create in Ruby to real world objects. For example, you have a dog and a dog has attributes like a name and a breed and can do things like bark and play. This is a good way to think about it because Ruby is a pure object-oriented language and everything appears to Ruby as an object. If you can really wrap that idea around your head then it can make learning the code behind it a little bit easier and understandable.

Instantiating an object (creating a new object) can be as simple as making a class and calling  '.new' chained onto it. Whenever you call this method 'new' on a class like 'Class_name.new', the class wil create a new instance of itself. This would create the new object but without any attributes theres not really much you could do with it. That's where reader/getter and writer/setter methods and the initialize method comes in. A reader method can only read the value but not change it and a writer method can only change the value but not read it. There are macros in Ruby for these called 'attr_reader' or attr_writer'. If you need the functionality of both these methods, Ruby is awesome enough to provide another macro called 'attr_accessor'. With these, we can set attributes to our object like give a dog object the ability to bark or give it a name. Now, if we wanted our dog object to always have certain attributes like a name right off the bat when it is created, then we could utilize the initialize method where an object will always be initialized with those specific properties upon creation or '.new'.

With all that, comes the idea of object realtionships. These relationships are described as 'belongs to', 'has many' and 'has many through'. The solid exapample that I like is we have 3 classes, an Artist, a Genre and a Song class. A song 'belongs to' an artist, an artist 'has many' songs and an artist 'has many genres through songs'. In Ruby code, these relationships will be formed via class and instance variables and methods and even inheritance of parent classes to child classes. The 'scope' of things from our variables to methods and the classes they are being used on becomes an essential thing to learn and understand. So to touch on the scope of things, when we are talking about methods, a class method provides functionality to a class itself while an instance method provides functionality to one instance of a class.(class methods are defined with 'self.' before the method name). Now for variables, a class variable (defined with @@ onto the variable name) is shared among a class and all of its descendants (descendant being a child class that inherited from a parent class). While an instance variable (defined with @) is not shared and each class has seperate instance variable. Just like you would expect from different objects.

These concepts can be a lot to take in and seem a little overwhelming when working with them at first, especially when you're pretty much brand new to the programming world, like myself. But like with all skills in life I believe practice makes perfect and with time comes mastery. So I think the best way to go is just to keep on coding!
