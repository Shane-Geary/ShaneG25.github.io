---
layout: post
title:      "'Concert Portfolio' My Ruby on Rails project"
date:       2020-11-14 14:03:38 +0000
permalink:  concert_portfolio_my_ruby_on_rails_project
---


Ruby on Rails is truly amazing, mostly because of everything going on under the hood of the macros, gems and commands that pack countless lines of code within one word or line of code that is readily available to use. It's seemigly "magical" as they say which is why regular Ruby, HTML, CSS, ActiveRecord, Sinatra and more are taught leading up to it, so one has a better understanding of how a lot of the code is working and what exactly it's doing. For my project, I did an upgraded version of the app I built for the Sinatra project. This time around, I felt myself really starting to enjoy the process, more then likely because things have started to click more so then ever when I started the Rails section. I was able to debug errors and issues on my own much quicker and far less often needing anyones help or having that feeling of "I don't even know where to begin to fix this". It must mean I'm getting somewhere! 

Creating an application with Rails follows conventions for writing code like MVC(Model, View, Controller) architecture for seperation of concern, naming files of the views to the corresponding controller actions, keeping the general code DRY(Don't repeat yourself) etc. Starting off with the blank easel, I begin on the back-end stuff with creating the tables and their columns/attributes in the database along with the model files and associations, for this app I used a migration generator which quickly sets up the structure of the files and classes. Then, seed data to play around with in the console to make sure the relationships are functioning properly. After that is set up, defining some controller actions and corresponding views is the next step. Often it's some sort of user signup, login and logout functionality with GET, POST, PATCH and DELETE requests through routing. Seeing the flow of the requests in the browser on the local host and debugging through the errors is the main process. And with that the app is well on its way! 

My app has three tables/models; User, Ticket, Venue. Ticket being the join table, a user "has many" tickets and has many venues "through" tickets, a venue "belongs to" a user, has many tickets and has many users through tickets. Those are the model relations. A user can signup directly with the app or they can login through their Google account which is a feature implemented with Omniauth. Once logged in, a user is greeted and shown a nav bar to create tickets of the concerts/live events they've attended and the venues the shows took place at. When creating a new ticket after a night out, a user can choose from a list of previously created venues to associate the ticket with or create a new venue for the ticket if need be. This makes for easy access to the details of the events one has attended for quick reference of perhaps what the date of a certain show was or who the band/artist/main act was. That being the whole purpose of this application! 

This project was challenging as always but I felt that I lept over a big hurdle in my understanding of programming. I knew that coding was my kind of thing but after getting past some learning curves, I know it's definitely something I want to make a career out of. I enjoy the head-scratching problem solving and the rewarding outcome of getting things working. And on top of that, all the fellow programmers and teachers have been great people. 
